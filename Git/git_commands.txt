Here is a comprehensive list of Git and GitHub commands that a DevOps engineer must know for daily tasks and collaboration. These are grouped by category for better understanding and practical usage.

✅ Essential Git Configuration

git config --global user.name "Your Name"
git config --global user.email "you@example.com"
git config --list   # Verify your Git config

📂 Repository Management

git init                  # Initialize a new Git repo
git clone <repo-url>     # Clone existing repo (from GitHub, etc.)

📄 Staging & Committing

git status               # Check status of files
git add <file>           # Stage file
git add .                # Stage all changes
git commit -m "message"  # Commit staged changes

🔄 Branching

git branch                     # List branches
git branch <branch-name>       # Create new branch
git checkout <branch-name>     # Switch to branch
git checkout -b <new-branch>   # Create + switch
git merge <branch>             # Merge into current branch
git branch -d <branch-name>    # Delete branch
git push origin --delete feature-xyz  # Delete branch in remote 

🔁 Sync with Remote (GitHub)

git remote -v                       # View remotes
git remote add origin <url>        # Add remote origin
git push -u origin <branch>        # Push branch and set upstream
git push                           # Push latest changes
git pull                           # Fetch + merge changes from remote
git fetch                          # Fetch changes only (no merge)

🔍 Log and History

git log                            # View commit history
git log --oneline --graph --all    # Pretty log
git show <commit-id>               # Show details of a commit
git diff                           # Show unstaged changes
git diff --staged                  # Show staged changes

💡 Undo & Reset

git reset <file>                   # Unstage a file
git checkout -- <file>             # Discard local changes
git reset --hard                   # Reset everything (careful!)
git revert <commit-id>             # Revert a specific commit

📌 Tagging Releases

git tag v1.0.0                        # Create tag
git tag -a v1.0.0 -m "Release tag"    # Annotated tag
git push origin v1.0.0                # Push tag

🤝 GitHub Collaboration

# After forking & cloning a repo:
git remote add upstream <main-repo-url>  # Add original repo
git fetch upstream                       # Fetch changes
git merge upstream/main                  # Merge into your branch

# Create Pull Request (PR) via GitHub UI

📋 Git Ignore
.gitignore – Add files/folders to ignore in Git

# Example entries
*.log
node_modules/
.env

🛠️ DevOps-specific Tips
Automate version bumps using git tag

Use GitHub Actions or webhooks to trigger CI/CD pipelines

Track infrastructure-as-code (e.g., Terraform) in Git

Maintain branches per environment (dev, qa, staging, prod)

Use signed commits (git commit -S -m "msg") for traceability

Use git stash for temporary saving during context switching





Question and answers:

fetch Vs pull:

You're asking about the difference between git fetch and git pull — a very common and important question for daily Git usage.

🔄 git fetch vs git pull

  Command	Action	                           Merges Changes?   Safe?	Use Case
git fetch	Downloads updates from remote only	❌ No	✅ Very safe	When you want to review changes before merging
git pull	Fetches + merges remote into local	✅ Yes	⚠️ Less safe	When you want latest code and are ready to merge

🔍 git fetch

Downloads commits, branches, tags from remote → updates your .git metadata.

It does NOT change your working directory or current branch.

You can inspect what changed before deciding to merge.

git fetch origin
git diff origin/main      # See what's new before merging
git merge origin/main     # Merge manually if you want


⚡ git pull
It is basically:

git fetch + git merge
Automatically fetches and merges the remote changes into your current branch.




git pull origin main
This updates your local working branch to match the remote.

May cause merge conflicts if your local work and remote changes overlap.

✅ Summary
Command	Downloads	Merges	When to Use
git fetch	✅ Yes	❌ No	When you want to review before merging
git pull	✅ Yes	✅ Yes	When you're ready to update your codebase immediately

🧠 Pro Tip:
If you're working in a team, it's often safer to:




git fetch
git log HEAD..origin/main   # See new commits
git merge origin/main       # Merge when you're ready
